// Code generated by mockery v2.13.0-beta.1. DO NOT EDIT.

package tinkoff

import (
	context "context"

	grpc "google.golang.org/grpc"

	investapi "github.com/tinkoff/invest-api-go-sdk"

	mock "github.com/stretchr/testify/mock"
)

// mockOrdersServiceClient is an autogenerated mock type for the ordersServiceClient type
type mockOrdersServiceClient struct {
	mock.Mock
}

// CancelOrder provides a mock function with given fields: ctx, in, opts
func (_m *mockOrdersServiceClient) CancelOrder(ctx context.Context, in *investapi.CancelOrderRequest, opts ...grpc.CallOption) (*investapi.CancelOrderResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *investapi.CancelOrderResponse
	if rf, ok := ret.Get(0).(func(context.Context, *investapi.CancelOrderRequest, ...grpc.CallOption) *investapi.CancelOrderResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*investapi.CancelOrderResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *investapi.CancelOrderRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrderState provides a mock function with given fields: ctx, in, opts
func (_m *mockOrdersServiceClient) GetOrderState(ctx context.Context, in *investapi.GetOrderStateRequest, opts ...grpc.CallOption) (*investapi.OrderState, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *investapi.OrderState
	if rf, ok := ret.Get(0).(func(context.Context, *investapi.GetOrderStateRequest, ...grpc.CallOption) *investapi.OrderState); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*investapi.OrderState)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *investapi.GetOrderStateRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrders provides a mock function with given fields: ctx, in, opts
func (_m *mockOrdersServiceClient) GetOrders(ctx context.Context, in *investapi.GetOrdersRequest, opts ...grpc.CallOption) (*investapi.GetOrdersResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *investapi.GetOrdersResponse
	if rf, ok := ret.Get(0).(func(context.Context, *investapi.GetOrdersRequest, ...grpc.CallOption) *investapi.GetOrdersResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*investapi.GetOrdersResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *investapi.GetOrdersRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostOrder provides a mock function with given fields: ctx, in, opts
func (_m *mockOrdersServiceClient) PostOrder(ctx context.Context, in *investapi.PostOrderRequest, opts ...grpc.CallOption) (*investapi.PostOrderResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *investapi.PostOrderResponse
	if rf, ok := ret.Get(0).(func(context.Context, *investapi.PostOrderRequest, ...grpc.CallOption) *investapi.PostOrderResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*investapi.PostOrderResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *investapi.PostOrderRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type newMockOrdersServiceClientT interface {
	mock.TestingT
	Cleanup(func())
}

// newMockOrdersServiceClient creates a new instance of mockOrdersServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newMockOrdersServiceClient(t newMockOrdersServiceClientT) *mockOrdersServiceClient {
	mock := &mockOrdersServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
