// Code generated by mockery v2.13.0-beta.1. DO NOT EDIT.

package tinkoff

import (
	context "context"

	grpc "google.golang.org/grpc"

	investapi "github.com/tinkoff/invest-api-go-sdk"

	mock "github.com/stretchr/testify/mock"
)

// mockStopOrdersServiceClient is an autogenerated mock type for the stopOrdersServiceClient type
type mockStopOrdersServiceClient struct {
	mock.Mock
}

// CancelStopOrder provides a mock function with given fields: ctx, in, opts
func (_m *mockStopOrdersServiceClient) CancelStopOrder(ctx context.Context, in *investapi.CancelStopOrderRequest, opts ...grpc.CallOption) (*investapi.CancelStopOrderResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *investapi.CancelStopOrderResponse
	if rf, ok := ret.Get(0).(func(context.Context, *investapi.CancelStopOrderRequest, ...grpc.CallOption) *investapi.CancelStopOrderResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*investapi.CancelStopOrderResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *investapi.CancelStopOrderRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStopOrders provides a mock function with given fields: ctx, in, opts
func (_m *mockStopOrdersServiceClient) GetStopOrders(ctx context.Context, in *investapi.GetStopOrdersRequest, opts ...grpc.CallOption) (*investapi.GetStopOrdersResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *investapi.GetStopOrdersResponse
	if rf, ok := ret.Get(0).(func(context.Context, *investapi.GetStopOrdersRequest, ...grpc.CallOption) *investapi.GetStopOrdersResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*investapi.GetStopOrdersResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *investapi.GetStopOrdersRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostStopOrder provides a mock function with given fields: ctx, in, opts
func (_m *mockStopOrdersServiceClient) PostStopOrder(ctx context.Context, in *investapi.PostStopOrderRequest, opts ...grpc.CallOption) (*investapi.PostStopOrderResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *investapi.PostStopOrderResponse
	if rf, ok := ret.Get(0).(func(context.Context, *investapi.PostStopOrderRequest, ...grpc.CallOption) *investapi.PostStopOrderResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*investapi.PostStopOrderResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *investapi.PostStopOrderRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type newMockStopOrdersServiceClientT interface {
	mock.TestingT
	Cleanup(func())
}

// newMockStopOrdersServiceClient creates a new instance of mockStopOrdersServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newMockStopOrdersServiceClient(t newMockStopOrdersServiceClientT) *mockStopOrdersServiceClient {
	mock := &mockStopOrdersServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
